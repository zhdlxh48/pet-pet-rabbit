//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.0
//     from Assets/Resources/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Rabbit
{
    public partial class @GameControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""Note"",
            ""id"": ""7067e87d-443e-44b9-a89b-72c9038daff1"",
            ""actions"": [
                {
                    ""name"": ""FlowerHit"",
                    ""type"": ""Button"",
                    ""id"": ""5031d40e-0482-4635-8034-487eaaeb7a23"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""LeafHit"",
                    ""type"": ""Button"",
                    ""id"": ""0e7d50f4-840f-4070-aa01-a688491cfac8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""ButterflyHit"",
                    ""type"": ""Button"",
                    ""id"": ""c0f1d668-f017-4ba5-b318-bdfa6a4cd782"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""WaterDropHit"",
                    ""type"": ""Button"",
                    ""id"": ""f1cf908a-0dbd-499a-aa01-0bca317ee136"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""RabbitHit"",
                    ""type"": ""Button"",
                    ""id"": ""c7f0d9f8-7024-41ae-8b5b-52982b9ff67b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5b031cc0-f749-4ab4-bb35-f24ff5432b4f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""FlowerHit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4c4e42c-328e-4217-b894-cd8d3f3f2517"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LeafHit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7216a9b1-0520-4f29-a809-3dfb1522123e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ButterflyHit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a681c85d-c821-4aa5-8552-3157d96f4f5a"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""WaterDropHit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0a7ae50-93dd-480b-b84a-7a802390d79e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RabbitHit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Note
            m_Note = asset.FindActionMap("Note", throwIfNotFound: true);
            m_Note_FlowerHit = m_Note.FindAction("FlowerHit", throwIfNotFound: true);
            m_Note_LeafHit = m_Note.FindAction("LeafHit", throwIfNotFound: true);
            m_Note_ButterflyHit = m_Note.FindAction("ButterflyHit", throwIfNotFound: true);
            m_Note_WaterDropHit = m_Note.FindAction("WaterDropHit", throwIfNotFound: true);
            m_Note_RabbitHit = m_Note.FindAction("RabbitHit", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Note
        private readonly InputActionMap m_Note;
        private INoteActions m_NoteActionsCallbackInterface;
        private readonly InputAction m_Note_FlowerHit;
        private readonly InputAction m_Note_LeafHit;
        private readonly InputAction m_Note_ButterflyHit;
        private readonly InputAction m_Note_WaterDropHit;
        private readonly InputAction m_Note_RabbitHit;
        public struct NoteActions
        {
            private @GameControls m_Wrapper;
            public NoteActions(@GameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @FlowerHit => m_Wrapper.m_Note_FlowerHit;
            public InputAction @LeafHit => m_Wrapper.m_Note_LeafHit;
            public InputAction @ButterflyHit => m_Wrapper.m_Note_ButterflyHit;
            public InputAction @WaterDropHit => m_Wrapper.m_Note_WaterDropHit;
            public InputAction @RabbitHit => m_Wrapper.m_Note_RabbitHit;
            public InputActionMap Get() { return m_Wrapper.m_Note; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(NoteActions set) { return set.Get(); }
            public void SetCallbacks(INoteActions instance)
            {
                if (m_Wrapper.m_NoteActionsCallbackInterface != null)
                {
                    @FlowerHit.started -= m_Wrapper.m_NoteActionsCallbackInterface.OnFlowerHit;
                    @FlowerHit.performed -= m_Wrapper.m_NoteActionsCallbackInterface.OnFlowerHit;
                    @FlowerHit.canceled -= m_Wrapper.m_NoteActionsCallbackInterface.OnFlowerHit;
                    @LeafHit.started -= m_Wrapper.m_NoteActionsCallbackInterface.OnLeafHit;
                    @LeafHit.performed -= m_Wrapper.m_NoteActionsCallbackInterface.OnLeafHit;
                    @LeafHit.canceled -= m_Wrapper.m_NoteActionsCallbackInterface.OnLeafHit;
                    @ButterflyHit.started -= m_Wrapper.m_NoteActionsCallbackInterface.OnButterflyHit;
                    @ButterflyHit.performed -= m_Wrapper.m_NoteActionsCallbackInterface.OnButterflyHit;
                    @ButterflyHit.canceled -= m_Wrapper.m_NoteActionsCallbackInterface.OnButterflyHit;
                    @WaterDropHit.started -= m_Wrapper.m_NoteActionsCallbackInterface.OnWaterDropHit;
                    @WaterDropHit.performed -= m_Wrapper.m_NoteActionsCallbackInterface.OnWaterDropHit;
                    @WaterDropHit.canceled -= m_Wrapper.m_NoteActionsCallbackInterface.OnWaterDropHit;
                    @RabbitHit.started -= m_Wrapper.m_NoteActionsCallbackInterface.OnRabbitHit;
                    @RabbitHit.performed -= m_Wrapper.m_NoteActionsCallbackInterface.OnRabbitHit;
                    @RabbitHit.canceled -= m_Wrapper.m_NoteActionsCallbackInterface.OnRabbitHit;
                }
                m_Wrapper.m_NoteActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @FlowerHit.started += instance.OnFlowerHit;
                    @FlowerHit.performed += instance.OnFlowerHit;
                    @FlowerHit.canceled += instance.OnFlowerHit;
                    @LeafHit.started += instance.OnLeafHit;
                    @LeafHit.performed += instance.OnLeafHit;
                    @LeafHit.canceled += instance.OnLeafHit;
                    @ButterflyHit.started += instance.OnButterflyHit;
                    @ButterflyHit.performed += instance.OnButterflyHit;
                    @ButterflyHit.canceled += instance.OnButterflyHit;
                    @WaterDropHit.started += instance.OnWaterDropHit;
                    @WaterDropHit.performed += instance.OnWaterDropHit;
                    @WaterDropHit.canceled += instance.OnWaterDropHit;
                    @RabbitHit.started += instance.OnRabbitHit;
                    @RabbitHit.performed += instance.OnRabbitHit;
                    @RabbitHit.canceled += instance.OnRabbitHit;
                }
            }
        }
        public NoteActions @Note => new NoteActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        public interface INoteActions
        {
            void OnFlowerHit(InputAction.CallbackContext context);
            void OnLeafHit(InputAction.CallbackContext context);
            void OnButterflyHit(InputAction.CallbackContext context);
            void OnWaterDropHit(InputAction.CallbackContext context);
            void OnRabbitHit(InputAction.CallbackContext context);
        }
    }
}
